# highly divisible triangular number

proc doc args {}

doc Running tri from the beginning {
    iter# 2079
    max: 2162160 has 320 divisors: (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 21 22 24 26 27 28 30 33 35 36 39 40 42 44 45 48 52 54 55 56 60 63 65 66 70 72 77 78 80 84 88 90 91 99 104 105 108 110 112 117 120 126 130 132 135 140 143 144 154 156 165 168 176 180 182 189 195 198 208 210 216 220 231 234 240 252 260 264 270 273 280 286 297 308 312 315 330 336 351 360 364 378 385 390 396 420 429 432 440 455 462 468 495 504 520 528 540 546 560 572 585 594 616 624 630 660 693 702 715 720 728 756 770 780 792 819 840 858 880 910 924 936 945 990 1001 1008 1040 1080 1092 1144 1155 1170 1188 1232 1260 1287 1320 1365 1386 1404 1430 1456 1485 1512 1540 1560 1584 1638 1680 1716 1755 1820 1848 1872 1890 1980 2002 2079 2145 2160 2184 2288 2310 2340 2376 2457 2520 2574 2640 2730 2772 2808 2860 2970 3003 3024 3080 3120 3276 3432 3465 3510 3640 3696 3780 3861 3960 4004 4095 4158 4290 4368 4620 4680 4752 4914 5005 5040 5148 5460 5544 5616 5720 5940 6006 6160 6435 6552 6864 6930 7020 7280 7560 7722 7920 8008 8190 8316 8580 9009 9240 9360 9828 10010 10296 10395 10920 11088 11440 11880 12012 12285 12870 13104 13860 14040 15015 15120 15444 16016 16380 16632 17160 18018 18480 19305 19656 20020 20592 20790 21840 23760 24024 24570 25740 27027 27720 28080 30030 30888 32760 33264 34320 36036 38610 39312 40040 41580 45045 48048 49140 51480 54054 55440 60060 61776 65520 72072 77220 80080 83160 90090 98280 102960 108108 120120 135135 144144 154440 166320 180180 196560 216216 240240 270270 308880 360360 432432 540540 720720 1081080 2162160)
284638539 microseconds per iteration
} {
(tcl) 115 % !tim
time {tri 2400}
# tri = n * (n+1) / 2
#  <n>      <tri> <num divisors>   <divisors>      
#    1          1: num:  1  div:1
#    2          3: num:  2  div:1 3
#    3          6: num:  4  div:1 2 3 6
#    7         28: num:  6  div:1 2 4 7 14 28
#    8         36: num:  9  div:1 2 3 4 6 9 12 18 36
#   15        120: num: 16  div:1 2 3 4 5 6 8 10 12 15 20 24 30 40 60 120
#   24        300: num: 18  div:1 2 3 4 5 6 10 12 15 20 25 30 50 60 75 100 150 300
#   32        528: num: 20  div:1 2 3 4 6 8 11 12 16 22 24 33 44 48 66 88 132 176 264 528
#   35        630: num: 24  div:1 2 3 5 6 7 9 10 14 15 18 21 30 35 42 45 63 70 90 105 126 210 315 630
#   63       2016: num: 36  div:1 2 3 4 6 7 8 9 12 14 16 18 21 24 28 32 36 42 48 56 63 72 84 96 112 126 144 168 224 252 288 336 504 672 1008 2016
#   80       3240: num: 40  div:1 2 3 4 5 6 8 9 10 12 15 18 20 24 27 30 36 40 45 54 60 72 81 90 108 120 135 162 180 216 270 324 360 405 540 648 810 1080 1620 3240
#  104       5460: num: 48  div:1 2 3 4 5 6 7 10 12 13 14 15 20 21 26 28 30 35 39 42 52 60 65 70 78 84 91 105 130 140 156 182 195 210 260 273 364 390 420 455 546 780 910 1092 1365 1820 2730 5460
#  224      25200: num: 90  div:1 2 3 4 5 6 7 8 9 10 12 14 15 16 18 20 21 24 25 28 30 35 36 40 42 45 48 50 56 60 63 70 72 75 80 84 90 100 105 112 120 126 140 144 150 168 175 180 200 210 225 240 252 280 300 315 336 350 360 400 420 450 504 525 560 600 630 700 720 840 900 1008 1050 1200 1260 1400 1575 1680 1800 2100 2520 2800 3150 3600 4200 5040 6300 8400 12600 25200
#  384      73920: num:112  div:1 2 3 4 5 6 7 8 10 11 12 14 15 16 20 21 22 24 28 30 32 33 35 40 42 44 48 55 56 60 64 66 70 77 80 84 88 96 105 110 112 120 132 140 154 160 165 168 176 192 210 220 224 231 240 264 280 308 320 330 336 352 385 420 440 448 462 480 528 560 616 660 672 704 770 840 880 924 960 1056 1120 1155 1232 1320 1344 1540 1680 1760 1848 2112 2240 2310 2464 2640 3080 3360 3520 3696 4620 4928 5280 6160 6720 7392 9240 10560 12320 14784 18480 24640 36960 73920
#  560     157080: num:128  div:1 2 3 4 5 6 7 8 10 11 12 14 15 17 20 21 22 24 28 30 33 34 35 40 42 44 51 55 56 60 66 68 70 77 84 85 88 102 105 110 119 120 132 136 140 154 165 168 170 187 204 210 220 231 238 255 264 280 308 330 340 357 374 385 408 420 440 462 476 510 561 595 616 660 680 714 748 770 840 924 935 952 1020 1122 1155 1190 1309 1320 1428 1496 1540 1785 1848 1870 2040 2244 2310 2380 2618 2805 2856 3080 3570 3740 3927 4488 4620 4760 5236 5610 6545 7140 7480 7854 9240 10472 11220 13090 14280 15708 19635 22440 26180 31416 39270 52360 78540 157080
#  935     437580: num:144  div:1 2 3 4 5 6 9 10 11 12 13 15 17 18 20 22 26 30 33 34 36 39 44 45 51 52 55 60 65 66 68 78 85 90 99 102 110 117 130 132 143 153 156 165 170 180 187 195 198 204 220 221 234 255 260 286 306 330 340 374 390 396 429 442 468 495 510 561 572 585 612 660 663 715 748 765 780 858 884 935 990 1020 1105 1122 1170 1287 1326 1430 1530 1683 1716 1870 1980 1989 2145 2210 2244 2340 2431 2574 2652 2805 2860 3060 3315 3366 3740 3978 4290 4420 4862 5148 5610 6435 6630 6732 7293 7956 8415 8580 9724 9945 11220 12155 12870 13260 14586 16830 19890 21879 24310 25740 29172 33660 36465 39780 43758 48620 72930 87516 109395 145860 218790 437580
# 1224     749700: num:162  div:1 2 3 4 5 6 7 9 10 12 14 15 17 18 20 21 25 28 30 34 35 36 42 45 49 50 51 60 63 68 70 75 84 85 90 98 100 102 105 119 126 140 147 150 153 170 175 180 196 204 210 225 238 245 252 255 294 300 306 315 340 350 357 420 425 441 450 476 490 510 525 588 595 612 630 700 714 735 765 833 850 882 900 980 1020 1050 1071 1190 1225 1260 1275 1428 1470 1530 1575 1666 1700 1764 1785 2100 2142 2205 2380 2450 2499 2550 2940 2975 3060 3150 3332 3570 3675 3825 4165 4284 4410 4900 4998 5100 5355 5950 6300 7140 7350 7497 7650 8330 8820 8925 9996 10710 11025 11900 12495 14700 14994 15300 16660 17850 20825 21420 22050 24990 26775 29988 35700 37485 41650 44100 49980 53550 62475 74970 83300 107100 124950 149940 187425 249900 374850 749700
# 1664    1385280: num:168  div:1 2 3 4 5 6 8 9 10 12 13 15 16 18 20 24 26 30 32 36 37 39 40 45 48 52 60 64 65 72 74 78 80 90 96 104 111 117 120 130 144 148 156 160 180 185 192 195 208 222 234 240 260 288 296 312 320 333 360 370 390 416 444 468 480 481 520 555 576 585 592 624 666 720 740 780 832 888 936 960 962 1040 1110 1170 1184 1248 1332 1440 1443 1480 1560 1665 1776 1872 1924 2080 2220 2340 2368 2405 2496 2664 2880 2886 2960 3120 3330 3552 3744 3848 4160 4329 4440 4680 4810 5328 5772 5920 6240 6660 7104 7215 7488 7696 8658 8880 9360 9620 10656 11544 11840 12480 13320 14430 15392 17316 17760 18720 19240 21312 21645 23088 26640 28860 30784 34632 35520 37440 38480 43290 46176 53280 57720 69264 76960 86580 92352 106560 115440 138528 153920 173160 230880 277056 346320 461760 692640 1385280
# 1728    1493856: num:192  div:1 2 3 4 6 7 8 9 12 13 14 16 18 19 21 24 26 27 28 32 36 38 39 42 48 52 54 56 57 63 72 76 78 84 91 96 104 108 112 114 117 126 133 144 152 156 168 171 182 189 208 216 224 228 234 247 252 266 273 288 304 312 336 342 351 364 378 399 416 432 456 468 494 504 513 532 546 608 624 672 684 702 728 741 756 798 819 864 912 936 988 1008 1026 1064 1092 1197 1248 1368 1404 1456 1482 1512 1596 1638 1729 1824 1872 1976 2016 2052 2128 2184 2223 2394 2457 2736 2808 2912 2964 3024 3192 3276 3458 3591 3744 3952 4104 4256 4368 4446 4788 4914 5187 5472 5616 5928 6048 6384 6552 6669 6916 7182 7904 8208 8736 8892 9576 9828 10374 11232 11856 12768 13104 13338 13832 14364 15561 16416 17784 19152 19656 20748 23712 26208 26676 27664 28728 31122 35568 38304 39312 41496 46683 53352 55328 57456 62244 71136 78624 82992 93366 106704 114912 124488 165984 186732 213408 248976 373464 497952 746928 1493856
# 2015    2031120: num:240  div:1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 18 20 21 24 26 28 30 31 35 36 39 40 42 45 48 52 56 60 62 63 65 70 72 78 80 84 90 91 93 104 105 112 117 120 124 126 130 140 144 155 156 168 180 182 186 195 208 210 217 234 240 248 252 260 273 279 280 310 312 315 336 360 364 372 390 403 420 434 455 465 468 496 504 520 546 558 560 585 620 624 630 651 720 728 744 780 806 819 840 868 910 930 936 1008 1040 1085 1092 1116 1170 1209 1240 1260 1302 1365 1395 1456 1488 1560 1612 1638 1680 1736 1820 1860 1872 1953 2015 2170 2184 2232 2340 2418 2480 2520 2604 2730 2790 2821 3120 3224 3255 3276 3472 3627 3640 3720 3906 4030 4095 4340 4368 4464 4680 4836 5040 5208 5460 5580 5642 6045 6448 6510 6552 7254 7280 7440 7812 8060 8190 8463 8680 9360 9672 9765 10416 10920 11160 11284 12090 13020 13104 14105 14508 15624 16120 16380 16926 17360 18135 19344 19530 21840 22320 22568 24180 25389 26040 28210 29016 31248 32240 32760 33852 36270 39060 42315 45136 48360 50778 52080 56420 58032 65520 67704 72540 78120 84630 96720 101556 112840 126945 135408 145080 156240 169260 203112 225680 253890 290160 338520 406224 507780 677040 1015560 2031120
# 2079    2162160: num:320  div:1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 21 22 24 26 27 28 30 33 35 36 39 40 42 44 45 48 52 54 55 56 60 63 65 66 70 72 77 78 80 84 88 90 91 99 104 105 108 110 112 117 120 126 130 132 135 140 143 144 154 156 165 168 176 180 182 189 195 198 208 210 216 220 231 234 240 252 260 264 270 273 280 286 297 308 312 315 330 336 351 360 364 378 385 390 396 420 429 432 440 455 462 468 495 504 520 528 540 546 560 572 585 594 616 624 630 660 693 702 715 720 728 756 770 780 792 819 840 858 880 910 924 936 945 990 1001 1008 1040 1080 1092 1144 1155 1170 1188 1232 1260 1287 1320 1365 1386 1404 1430 1456 1485 1512 1540 1560 1584 1638 1680 1716 1755 1820 1848 1872 1890 1980 2002 2079 2145 2160 2184 2288 2310 2340 2376 2457 2520 2574 2640 2730 2772 2808 2860 2970 3003 3024 3080 3120 3276 3432 3465 3510 3640 3696 3780 3861 3960 4004 4095 4158 4290 4368 4620 4680 4752 4914 5005 5040 5148 5460 5544 5616 5720 5940 6006 6160 6435 6552 6864 6930 7020 7280 7560 7722 7920 8008 8190 8316 8580 9009 9240 9360 9828 10010 10296 10395 10920 11088 11440 11880 12012 12285 12870 13104 13860 14040 15015 15120 15444 16016 16380 16632 17160 18018 18480 19305 19656 20020 20592 20790 21840 23760 24024 24570 25740 27027 27720 28080 30030 30888 32760 33264 34320 36036 38610 39312 40040 41580 45045 48048 49140 51480 54054 55440 60060 61776 65520 72072 77220 80080 83160 90090 98280 102960 108108 120120 135135 144144 154440 166320 180180 196560 216216 240240 270270 308880 360360 432432 540540 720720 1081080 2162160
}

proc factorial {n} {
    set f 1
    incr n
    for {set i 2} {$i < $n} {incr i} {
	set f [expr {$f * $i}]
    }
    set f
}

proc pfactorial {n} { ; # multiple of only primes less than or equal to n
    set f 1
    incr n
    for {set i 2} {$i < $n} {incr i} {
	if {[prime? $i]} {
	    set f [expr {$f * $i}]
	}
    }
    set f
}
proc prime? {num} {
    if {$num == 2} { return 1 }
    if {[even? $num]} { return 0 }
    for {set i 3} {$i <= [limit $num]} {incr i 2} {
        if {$num % $i == 0} { return 0 }
    }
    return 1
}
proc even? {num} { expr {$num % 2 == 0} }
# num has no prime factors greater than this limit
proc limit {num} { expr sqrt($num) }

proc divisors {num} {
    set out {}
    for {set i 1} {$i < $num} {incr i} {
	if {[expr {$num % $i}]==0} { 
	    lappend out $i
	}
    }
    lappend out $num
    set out
}

proc show {i tri} {
    variable max
    variable info
    set num [llength [set d [divisors $tri]]]
    if {$num > $max} {
	puts [format "\#%5s %10s: num:%3s  div:%s" $i $tri $num $d]
	set max $num
	set info "$tri has $max divisors: ($d)"
    }
}
proc init {} {
    variable max 0
    variable info ""
}

proc tri {from to} {
    init
    set tri 1
    show 1 $tri
    for {set i 2} {$i < $to} {incr i} {
	incr tri $i
	if {0} {
	    show $i $tri
	} else {
	    if {$i > $from && $i < $to} {
		puts "tri=$tri next delta=[expr 1+$i]"
		show $i $tri
	    }
	}
    }
    variable info
    #puts "max: $info"
    return $tri
}

# too slow..
proc search2 { {how_many 5} } { ;  # looking for more divisors than this
    set tri 1      ; # triangular number 1+2+3+..
    set last 1      ; # add this plus one to the last tri to get the next..
    while {1} {
	if {[set num [num_divisors $tri]] > $how_many} {
	    puts "$tri has $num divisors"
	    break
	}
	incr tri [incr last] ; # get the next triangular number
    }
}
proc num_divisors {num} {
    set count 1 ; # count self
    for {set i 1} {$i < $num} {incr i} {
	if {[expr {$num % $i}]==0} { 
	    incr count
	}
    }
    set count
}
